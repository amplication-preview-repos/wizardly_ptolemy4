/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Timeline } from "./Timeline";
import { TimelineCountArgs } from "./TimelineCountArgs";
import { TimelineFindManyArgs } from "./TimelineFindManyArgs";
import { TimelineFindUniqueArgs } from "./TimelineFindUniqueArgs";
import { CreateTimelineArgs } from "./CreateTimelineArgs";
import { UpdateTimelineArgs } from "./UpdateTimelineArgs";
import { DeleteTimelineArgs } from "./DeleteTimelineArgs";
import { TimelineService } from "../timeline.service";
@graphql.Resolver(() => Timeline)
export class TimelineResolverBase {
  constructor(protected readonly service: TimelineService) {}

  async _timelinesMeta(
    @graphql.Args() args: TimelineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Timeline])
  async timelines(
    @graphql.Args() args: TimelineFindManyArgs
  ): Promise<Timeline[]> {
    return this.service.timelines(args);
  }

  @graphql.Query(() => Timeline, { nullable: true })
  async timeline(
    @graphql.Args() args: TimelineFindUniqueArgs
  ): Promise<Timeline | null> {
    const result = await this.service.timeline(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Timeline)
  async createTimeline(
    @graphql.Args() args: CreateTimelineArgs
  ): Promise<Timeline> {
    return await this.service.createTimeline({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Timeline)
  async updateTimeline(
    @graphql.Args() args: UpdateTimelineArgs
  ): Promise<Timeline | null> {
    try {
      return await this.service.updateTimeline({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Timeline)
  async deleteTimeline(
    @graphql.Args() args: DeleteTimelineArgs
  ): Promise<Timeline | null> {
    try {
      return await this.service.deleteTimeline(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
