/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimelineService } from "../timeline.service";
import { TimelineCreateInput } from "./TimelineCreateInput";
import { Timeline } from "./Timeline";
import { TimelineFindManyArgs } from "./TimelineFindManyArgs";
import { TimelineWhereUniqueInput } from "./TimelineWhereUniqueInput";
import { TimelineUpdateInput } from "./TimelineUpdateInput";

export class TimelineControllerBase {
  constructor(protected readonly service: TimelineService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Timeline })
  async createTimeline(
    @common.Body() data: TimelineCreateInput
  ): Promise<Timeline> {
    return await this.service.createTimeline({
      data: data,
      select: {
        createdAt: true,
        end: true,
        id: true,
        name: true,
        start: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Timeline] })
  @ApiNestedQuery(TimelineFindManyArgs)
  async timelines(@common.Req() request: Request): Promise<Timeline[]> {
    const args = plainToClass(TimelineFindManyArgs, request.query);
    return this.service.timelines({
      ...args,
      select: {
        createdAt: true,
        end: true,
        id: true,
        name: true,
        start: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Timeline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async timeline(
    @common.Param() params: TimelineWhereUniqueInput
  ): Promise<Timeline | null> {
    const result = await this.service.timeline({
      where: params,
      select: {
        createdAt: true,
        end: true,
        id: true,
        name: true,
        start: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Timeline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTimeline(
    @common.Param() params: TimelineWhereUniqueInput,
    @common.Body() data: TimelineUpdateInput
  ): Promise<Timeline | null> {
    try {
      return await this.service.updateTimeline({
        where: params,
        data: data,
        select: {
          createdAt: true,
          end: true,
          id: true,
          name: true,
          start: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Timeline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTimeline(
    @common.Param() params: TimelineWhereUniqueInput
  ): Promise<Timeline | null> {
    try {
      return await this.service.deleteTimeline({
        where: params,
        select: {
          createdAt: true,
          end: true,
          id: true,
          name: true,
          start: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
